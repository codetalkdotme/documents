1. autoGrowCollectionLimit default 256 

---------------------------------------------------------------------
@RequestMapping(value = "update", method = RequestMethod.POST)
	@ResponseBody
	public String update(HouseholdHeader pageHouseholdHeader, HttpServletRequest request) {

================================================
HouseholdHeader 

==> private List<HouseHoldDetail> details = new ArrayList<HouseHoldDetail>();
	
---------------------------------------------------------------------

前端组装数据时如果 HouseHoldDetail 个数超过256就会报错!

Fix:
---------------------------------------------------------------------
@InitBinder  
public void initBinder(WebDataBinder binder) {  
	// 设置List的最大长度  
	binder.setAutoGrowCollectionLimit(1000000);
}
---------------------------------------------------------------------

2. MVC async config

https://www.clianz.com/2016/02/24/configuring-spring-mvc-async-threads/

application.properties
-------------------------------------------------------------------------
web.executor.minPoolSize=10
web.executor.maxPoolSize=20
web.executor.maxQueueSize=50000
-------------------------------------------------------------------------

-------------------------------------------------------------------------
@Configuration
@ConfigurationProperties(prefix = "web.executor")
public class WebExecutorConfig {

public static final int DEFAULT_MIN_POOL_SIZE = 10;
public static final int DEFAULT_MAX_POOL_SIZE = 20;
public static final int DEFAULT_MAX_QUEUE_SIZE = 50000;

private int minPoolSize = DEFAULT_MIN_POOL_SIZE;
private int maxPoolSize = DEFAULT_MAX_POOL_SIZE;
private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;

@Bean
public AsyncTaskExecutor asyncTaskExecutor() {
	final ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
	executor.setCorePoolSize(minPoolSize);
	executor.setMaxPoolSize(maxPoolSize);
	executor.setQueueCapacity(maxQueueSize);
	executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());
	executor.setWaitForTasksToCompleteOnShutdown(true);
	executor.initialize();

	return executor;
}

@Bean
public WebMvcConfigurerAdapter webMvcConfigurerAdapter(AsyncTaskExecutor asyncTaskExecutor) {
	return new WebMvcConfigurerAdapter() {
		@Override
		public void configureAsyncSupport(AsyncSupportConfigurer configurer) {
			configurer.setTaskExecutor(asyncTaskExecutor);
			super.configureAsyncSupport(configurer);
		}
	};
}
-------------------------------------------------------------------------

2. send Redirect

Example: 
-------------------------------------------------------------------------
@RequestMapping(value = "/toUpgrade", method = RequestMethod.GET)
public String toUpgrade(Model model, HttpServletRequest request) {
	// ......
	
	return user == null ? "redirect:/" : "upgrade";
}
-------------------------------------------------------------------------











	